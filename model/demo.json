{'texture_encoder': Sequential(
  (0): Conv2d(1, 4, kernel_size=(3, 3), stride=(1, 1), padding=same)
  (1): LeakyReLU(negative_slope=0.01, inplace=True)
  (2): Conv2d(4, 2, kernel_size=(1, 1), stride=(1, 1), padding=same)
  (3): LeakyReLU(negative_slope=0.01, inplace=True)
  (4): Conv2d(3, 4, kernel_size=(3, 3), stride=(1, 1), padding=same)
  (5): LeakyReLU(negative_slope=0.01, inplace=True)
  (6): Conv2d(4, 2, kernel_size=(1, 1), stride=(1, 1), padding=same)
  (7): LeakyReLU(negative_slope=0.01, inplace=True)
), 'style_encoder': Sequential(
  (0): Conv2d(1, 8, kernel_size=(3, 3), stride=(2, 2), padding=same)
  (1): LeakyReLU(negative_slope=0.01, inplace=True)
  (2): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1), padding=same)
  (3): LeakyReLU(negative_slope=0.01, inplace=True)
  (4): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=same)
  (5): LeakyReLU(negative_slope=0.01, inplace=True)
  (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), padding=same)
  (7): LeakyReLU(negative_slope=0.01, inplace=True)
  (8): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=same)
  (9): LeakyReLU(negative_slope=0.01, inplace=True)
  (10): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), padding=same)
  (11): LeakyReLU(negative_slope=0.01, inplace=True)
  (12): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=same)
  (13): LeakyReLU(negative_slope=0.01, inplace=True)
  (14): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), padding=same)
  (15): LeakyReLU(negative_slope=0.01, inplace=True)
  (16): AdaptiveAvgPool2d(output_size=(1, 1))
), 'decoder_layers': [Sequential(
  (0): Conv2d(1, 4, kernel_size=(3, 3), stride=(1, 1), padding=same)
  (1): LeakyReLU(negative_slope=0.01, inplace=True)
), Sequential(
  (0): Conv2d(4, 2, kernel_size=(1, 1), stride=(1, 1), padding=same)
  (1): LeakyReLU(negative_slope=0.01, inplace=True)
), Sequential(
  (0): Conv2d(2, 4, kernel_size=(3, 3), stride=(1, 1), padding=same)
  (1): LeakyReLU(negative_slope=0.01, inplace=True)
), Sequential(
  (0): Conv2d(4, 1, kernel_size=(1, 1), stride=(1, 1), padding=same)
  (1): LeakyReLU(negative_slope=0.01, inplace=True)
)], 'decoder_miu': [Sequential(
  (0): Linear(in_features=64, out_features=64, bias=True)
  (1): Tanh()
  (2): Linear(in_features=64, out_features=32, bias=True)
  (3): Tanh()
  (4): Linear(in_features=32, out_features=1, bias=True)
  (5): Tanh()
), Sequential(
  (0): Linear(in_features=64, out_features=64, bias=True)
  (1): Tanh()
  (2): Linear(in_features=64, out_features=32, bias=True)
  (3): Tanh()
  (4): Linear(in_features=32, out_features=4, bias=True)
  (5): Tanh()
), Sequential(
  (0): Linear(in_features=64, out_features=64, bias=True)
  (1): Tanh()
  (2): Linear(in_features=64, out_features=32, bias=True)
  (3): Tanh()
  (4): Linear(in_features=32, out_features=2, bias=True)
  (5): Tanh()
), Sequential(
  (0): Linear(in_features=64, out_features=64, bias=True)
  (1): Tanh()
  (2): Linear(in_features=64, out_features=32, bias=True)
  (3): Tanh()
  (4): Linear(in_features=32, out_features=4, bias=True)
  (5): Tanh()
)], 'decoder_sigma': [Sequential(
  (0): Linear(in_features=64, out_features=64, bias=True)
  (1): Tanh()
  (2): Linear(in_features=64, out_features=32, bias=True)
  (3): Tanh()
  (4): Linear(in_features=32, out_features=1, bias=True)
  (5): Tanh()
), Sequential(
  (0): Linear(in_features=64, out_features=64, bias=True)
  (1): Tanh()
  (2): Linear(in_features=64, out_features=32, bias=True)
  (3): Tanh()
  (4): Linear(in_features=32, out_features=4, bias=True)
  (5): Tanh()
), Sequential(
  (0): Linear(in_features=64, out_features=64, bias=True)
  (1): Tanh()
  (2): Linear(in_features=64, out_features=32, bias=True)
  (3): Tanh()
  (4): Linear(in_features=32, out_features=2, bias=True)
  (5): Tanh()
), Sequential(
  (0): Linear(in_features=64, out_features=64, bias=True)
  (1): Tanh()
  (2): Linear(in_features=64, out_features=32, bias=True)
  (3): Tanh()
  (4): Linear(in_features=32, out_features=4, bias=True)
  (5): Tanh()
)], 'mix_style': AdaIN()}